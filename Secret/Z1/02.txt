1> opened v8 engine git repo, and found 72% is written in c++.  
   Eventually JavaScript is c++ program.

2> Visited v8 official website of v8
    -> V8 is Googleâ€™s open source high-performance JavaScript 
       and WebAssembly (SEE MORE) engine, written in C++. It is used in Chrome and in Node.js, among others. It implements ECMAScript
       and WebAssembly, and runs on Windows, macOS, and Linux systems that use x64, IA-32, or ARM processors. V8 can be embedded 
       into any C++ application.

3> V8 can be embedded into any C++ application, what it necessarily means is that if v8 is c++ program and can run js, then 
   if we create a c++ program, and embed v8 code then we already have existing js code, and we can further write more code and 
   update existing one to increase the capaity and possibility of what js can do. Hence node.js is also a c++ (and more languages like Javascript, python...)
    program, with v8(which is also
   c++ program)  already present and more code is added and some existing updated.

   Many capabilities have been increase for example :-

   1> File system :- in normal v8 engine js (client side), we can read file, but can't write a file, but in node.js we can 
      also write file, delete it..and anything, because node.js directly interact with system resources.
      In Node.js, you can handle file uploads on the server using libraries like multer or formidable. You can receive the file from 
      the client, save it to disk, and perform other server-side operations on it (e.g., storing it in a database, resizing images, etc.).

   2> Network requests :- in normal js, only a request can be made to fetch some data, but in node.js, a request can be made
      as well as served.

      Browser: JavaScript can send requests to servers, but it can't host a server or handle incoming HTTP requests. It can 
      only respond to the server's data.

      Node.js: In Node.js, JavaScript can not only send requests to other servers but also host a server, listen for incoming HTTP 
      requests, and build web applications or APIs.

    3> Asynchronous I/O:

    Both environments support asynchronous operations (e.g., using fetch in the browser or fs in Node.js), but Node.js excels 
    in non-blocking, event-driven I/O, which is particularly useful for handling many concurrent requests on the server.      

    4> Environment:

    Browser: JavaScript runs in a controlled environment, typically interacting with the DOM (for UI), browser APIs 
    (like fetch, localStorage), and limited access to the file system or network.

    Node.js: JavaScript runs in a server-side environment, allowing access to system resources (e.g., file system, network ports, databases),
    and can handle requests and responses like a web server.


4> ECMAScript (often abbreviated as ES) is a standardized scripting language specification that serves as the foundation for several 
   programming languages, including JavaScript, JScript, and ActionScript. It defines the rules, guidelines, and features for how 
   these languages should behave, ensuring consistency across different implementations of the language. ECMAScript is not a programming
    language itself, but rather a specification. For example, ECMAScript 5 (ES5) introduced important features like strict mode, JSON support, and methods like Array.forEach().
    ECMAScript 6 (ES6), also called ES2015, brought major updates, such as let and const for block-scoped variables, arrow functions, classes, promises, modules, and more.
    After ES6, ECMAScript versions are generally named based on the year of release, such as ES2016, ES2017, and so on. For example, ES2017 added features like async/await
    for better asynchronous programming.

    * since osome ther languages also use ECMAScript, so if they all implement ES6 version then they all will have those ES6 features, like
      let, const, Array.forEach(), async-await

-> The reason why js needs to follow satandard, because it initially came with objective to serve web. Their could be different web browsers, 
   if different web browsers executes js in different way, then it would be pbm for developers to create a webpage, like for this browser 
   write this code, for another one , another code.

   /* That's correct! Before ECMAScript was standardized, JavaScript was still in existence, but it was not a standardized or consistent language across different 
   browsers. Here's a bit more context:

    JavaScript was originally created by Brendan Eich at Netscape in 1995. It was initially called Mocha, then LiveScript, and finally became JavaScript as 
    it was introduced in Netscape Navigator 2.0. 
    At this point, JavaScript was a scripting language for web pages and didn't have a formal specification or standard.

    The lack of standardization meant that each browser could implement JavaScript in its own way. This led to incompatibilities and bugs across 
    different browsers. For example, Netscape's JavaScript and Internet Explorer's JScript were similar but not the same, causing major issues for developers.

*/