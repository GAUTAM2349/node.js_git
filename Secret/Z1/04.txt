1> Although all the code for an application can be written in one place, that is not scalable, maintainable.
    -> Hence code is broken into broken more files, these files are called modules, and serves base for modular
       programming. These modules can exchange their functionalities with each other. Modules are executed in their
       own scope. It means that if a module is imported in other module, it means that first module is run as an independent
       file, and as soon as execution of that file end, everything (variables, functions.) are vanished and can't be
       accessed neither before nor after in second module. HENCE, IF we want to use functions or variables of another 
       module we must do two things :-
       1> Export those functions and variables from first module.
       2> Import them in second module.


2> In normal js we use 'export' keyword BUT IN NODE.JS WE USE 'exportS' keyword. We export them by wrapping them inside an
    object and assigning it to module.exports and import using require and either take whole object in single variable and 
    use dot operator or use object destructuring to get them as separate entity.

3> Their are two module system standards CJS (common Javascript - default of node.js). Seconde is mjs (ES modules - default of client sides - 
   react, angular..). First uses module.exports and import. Second uses simple import export. To use es6 module system in node.js, we
   need to specify "type" : "module" in package.json.

4> Apart from syntax, difference is that,
    
    -> CJS loads synchronously, ie. first required module is loaded then next line runs.
    -> MJS module also by default runs synchronously, but it can be made run asynchronous, and it
       is very beneficial in some case, will see later.

    -> CJS modules runs in non-strict mode  and MJS modules runs in strict mode.
        To see preview, try using a variable without var keyword in both.

5> 'module' in node.js is an object , and it contains some properties related to file name of curren directory , it's parent and more.
    And inside it 'exports' is a prperty which has value an empty object. So either we can assign it whole object like we usually do while
    exporting or can also use dot operator to append variables and functions to it.        